// Generated by CoffeeScript 1.6.3
(function() {
  var Route, Router;

  Route = (function() {
    var _pattern_to_regexp;

    _pattern_to_regexp = function() {
      var param_keys;
      this.route = this.pattern.replace(')', ')?');
      param_keys = [];
      this.route = this.route.replace(/:(\w+)\+?/g, function(match, name) {
        var param_key, replace_with;
        param_key = {
          name: name,
          regex: match,
          is_splat: false
        };
        if (match.substr(-1) === '+') {
          param_key.is_splat = true;
          replace_with = '(.+)';
        } else {
          replace_with = '([^\/]+)';
        }
        param_keys.push(param_key);
        return replace_with;
      });
      this.param_keys = param_keys;
      if (this.route.substr(-1) === '/') {
        this.route += '?';
      }
      return this.route = '^' + this.route + '$';
    };

    function Route(pattern, callback) {
      this.pattern = pattern;
      this.callback = callback;
      this.params = [];
      _pattern_to_regexp.call(this);
    }

    Route.prototype.matches = function(uri) {
      var index, match, matches, param_values, _i, _j, _len, _len1;
      if (uri == null) {
        uri = window.location.pathname;
      }
      if (!((matches = uri.match(this.route)) && matches.length)) {
        return false;
      }
      param_values = [];
      for (_i = 0, _len = matches.length; _i < _len; _i++) {
        match = matches[_i];
        if (!(typeof match === 'undefined' || match.substr(0, 1) === '/')) {
          param_values.push(match);
        }
      }
      for (index = _j = 0, _len1 = param_values.length; _j < _len1; index = ++_j) {
        match = param_values[index];
        this.params.push(this.param_keys[index].is_splat ? match.split('/') : match);
      }
      return true;
    };

    return Route;

  })();

  Router = (function() {
    function Router() {
      this.routes = [];
    }

    Router.prototype.add = function(route, callback) {
      this.routes.push(new Route(route, callback));
      return this;
    };

    Router.prototype.visit = function(uri) {
      var route, _i, _len, _ref, _results;
      if (uri == null) {
        uri = window.location.pathname;
      }
      _ref = this.routes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        route = _ref[_i];
        if (route.matches()) {
          _results.push(route.callback.apply(route, route.params));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Router;

  })();

}).call(this);
